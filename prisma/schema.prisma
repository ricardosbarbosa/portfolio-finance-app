// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  email       String        @unique
  name        String
  password    String        @default("")
  role        UserRole      @default(USER)
  status      UserStatus    @default(ACTIVE)
  accounts    Account[]
  Budget      Budget[]
  Card        Card[]
  Category    Category[]
  Transaction Transaction[]
  Transfer    Transfer[]
  UserSession UserSession[]
}

model UserSession {
  id        Int               @id @default(autoincrement())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  token     String            @unique
  status    UserSessionStatus
  userId    Int
  User      User              @relation(fields: [userId], references: [id])
}

model Account {
  id                  Int           @id @default(autoincrement())
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  name                String
  balance             Float
  userId              Int?
  type                AccountType
  status              AccountStatus
  User                User?         @relation(fields: [userId], references: [id])
  transactions        Transaction[]
  TransferFromAccount Transfer[]    @relation("TransferFromAccount")
  TransferToAccount   Transfer[]    @relation("TransferToAccount")
}

model Card {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  number          String            @unique
  cvv             String
  expiry          DateTime
  type            CardType          @default(VISA)
  userId          Int
  User            User              @relation(fields: [userId], references: [id])
  CardTransaction CardTransaction[]
}

model CardTransaction {
  id              Int             @id @default(autoincrement())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  amount          Float
  transactionId   String
  transactionType TransactionType
  cardId          Int
  Card            Card            @relation(fields: [cardId], references: [id])
}

model Transaction {
  id              Int             @id @default(autoincrement())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  amount          Float
  transactionId   String
  transactionType TransactionType
  accountId       Int
  userId          Int?
  categoryId      Int?
  Account         Account         @relation(fields: [accountId], references: [id])
  Category        Category?       @relation(fields: [categoryId], references: [id])
  User            User?           @relation(fields: [userId], references: [id])
}

model Transfer {
  id              Int             @id @default(autoincrement())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  amount          Float
  transactionId   String
  transactionType TransactionType
  fromAccountId   Int
  toAccountId     Int
  userId          Int?
  fromAccount     Account         @relation("TransferFromAccount", fields: [fromAccountId], references: [id])
  toAccount       Account         @relation("TransferToAccount", fields: [toAccountId], references: [id])
  User            User?           @relation(fields: [userId], references: [id])
}

model Category {
  id              Int             @id @default(autoincrement())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  name            String
  color           String
  icon            String
  userId          Int
  transactionType TransactionType @default(EXPENSE)
  parentId        Int?
  Budget          Budget[]
  parentCategory  Category?       @relation("SubCategory", fields: [parentId], references: [id])
  subCategory     Category[]      @relation("SubCategory")
  User            User            @relation(fields: [userId], references: [id])
  Transaction     Transaction[]
}

model Budget {
  id              Int             @id @default(autoincrement())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  allocatedAmount Float
  spentAmount     Float
  remainingAmount Float
  startDate       DateTime
  endDate         DateTime
  transactionType TransactionType @default(EXPENSE)
  budgetType      BudgetType      @default(MONTHLY)
  budgetStatus    BudgetStatus    @default(ACTIVE)
  budgetRollover  BudgetRollover  @default(OFF)
  categoryId      Int             @unique
  userId          Int
  Category        Category        @relation(fields: [categoryId], references: [id])
  User            User            @relation(fields: [userId], references: [id])
}

enum AccountType {
  SAVINGS
  CHECKING
}

enum AccountStatus {
  ACTIVE
  INACTIVE
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum BudgetType {
  WEEKLY
  MONTHLY
  YEARLY
}

enum BudgetStatus {
  ACTIVE
  INACTIVE
}

enum BudgetRollover {
  ON
  OFF
}

enum UserRole {
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum UserSessionStatus {
  ACTIVE
  INACTIVE
}

enum CardType {
  VISA
  MASTERCARD
  AMERICANEXPRESS
  DISCOVER
  DINERSCLUB
  JCB
  UNIONPAY
}

enum CardStatus {
  ACTIVE
  INACTIVE
}
